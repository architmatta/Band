%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This is the main file to run the whole process
%This file is meant to process the data and find features
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initialization
clear ; close all; clc

[horn_train] = get_horn_data();
[silence_train] = get_silence_data();
[cry_train] = get_cry_data();

horn_feat = [];
silence_feat = [];
cry_feat = [];

frame_length = 50;
frame_shift = 25;
alpha = 0.97;
window = @hanning;
R = [300 5000]; %frequency range
M = 26; % number of filterbank channels
N = 20; % number of mfcc
L = 22; % liftering coefficient

%% ==========Part 1: Find Feature and visualize============
for i = 1:size(horn_train)
   audiofile = horn_train(i,:);
   [sound_data, samp_freq] = audioread(audiofile, 'double');
   sound_data = sound_data(:, 1); %only data in 1st column
   [ CC, FBE, frames ] = mfcc( sound_data, samp_freq, frame_length,...
        frame_shift, alpha, window, R, M, N, L );
    CC = CC';
    CC = CC(1:8,:);
    CC = CC(:);
    CC = CC';
    
    horn_feat = [horn_feat; CC];
end

output1 = ones(size(horn_feat, 1), 1);
horn_out = output1;

for i = 1:size(silence_train) 
    audiofile = silence_train(i, :);
    [sound_data, samp_freq] = audioread(audiofile, 'double');
    sound_data = sound_data(:, 1);
    [ CC, FBE, frames ] = mfcc( sound_data, samp_freq, frame_length,...
        frame_shift, alpha, window, R, M, N, L );
    CC = CC';
    CC = CC(1:8,:);
    CC = CC(:);
    CC = CC';
    
    silence_feat = [silence_feat; CC];
end
out1= ones(size(horn_feat, 1), 1);
for i = 1:size(silence_feat, 1)
    output1 = [output1; 0];
end

for i = 1:size(cry_train)
   audiofile = cry_train(i,:);
   [sound_data, samp_freq] = audioread(audiofile, 'double');
   sound_data = sound_data(:, 1); %only data in 1st column
   [ CC, FBE, frames ] = mfcc( sound_data, samp_freq, frame_length,...
        frame_shift, alpha, window, R, M, N, L );
    CC = CC';
    CC = CC(1:8,:);
    CC = CC(:);
    CC = CC';
    
    cry_feat = [cry_feat; CC];
end
%% ====================== final ==============================

%all features
sound_train = [horn_feat; silence_feat];
%feature normalization
for i = 1:size(sound_train, 2)
maxa(i) = max(abs(sound_train(:, i)));
end
for i = 1:size(sound_train, 2)
norm_train(:, i) = sound_train(:, i)/maxa(i);
end

new_output = [output1 abs(output1-1)];

